<%-include('partials/header.ejs')%>

<!-- SweetAlert CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.0/dist/sweetalert2.min.css">





<link rel="stylesheet" href="/stylesheet/checkout.css">
<header class="header" style="box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
    <div class="container">
       
            <!-- Logo Section -->
            <div class="header__logo">
                <a href="/user/">
                    <img style="height: 30px; width: 140px;" src="/image/Shoppycartfinel.png" alt="ShoppyCart Logo">
                </a>
            </div>
          
          
     
    </div>
</header>


<!-- Header Section End -->

<div class="modal fade" id="addAddressModal" tabindex="-1" role="dialog" aria-labelledby="addAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="newAddressForm">
                    <div class="form-group">
                        <label for="newName">Full Name</label>
                        <input type="text" class="form-control" id="newName"  required>
                    </div>
                    <div class="form-group">
                        <label for="newAddress">Address</label>
                        <input type="text" class="form-control" id="newAddress"required>
                    </div>
                    <div class="form-group">
                        <label for="newLocality">locality</label>
                        <input type="text" class="form-control" id="newLocality"required>
                    </div>
                    <div class="form-group">
                        <label for="newCity">City</label>
                        <input type="text" class="form-control" id="newCity"  required>
                    </div>
                    <div class="form-group">
                        <label for="newState">State</label>
                        <input type="text" class="form-control" id="newState"  required>
                    </div>
                    <div class="form-group">
                        <label for="newPhone">Mobile</label>
                        <input type="text" class="form-control" id="newPhone" required>
                    </div>
                    <div class="form-group">
                        <label for="newPincode">Postal Code</label>
                        <input type="text" class="form-control" id="newPincode" required>
                    </div>
                    <div class="form-group">
                        <label for="newAlternatePhone">alternate Number</label>
                        <input type="text" class="form-control" id="newAlternatePhone" >
                    </div>
                    <div class="form-group">
                        <label for="newLandmark">Landmark</label>
                        <input type="text" class="form-control" id="newLandmark" >
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveNewAddress()">Save Address</button>
            </div>
        </div>
    </div>
</div>
    <div class="container" style="margin-top: 80px;">
        <h2>Checkout</h2>
        
        <div class="row">
            <!-- Left Column: Cart Items and Total -->
            <div>
                <div class="cart-items mb-4">
                    <h4>Your Cart Items</h4>
                    <% if (items.length > 0) { %>
                        <ul class="list-group">
                            <% items.forEach(item => { %>
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div class="flex-col d-flex align-items-center">
                                        <img src="/uploads/<%= item.imageUrl %>" alt="<%= item.name %>" width="50" height="70" class="me-2">
                                        <strong class="me-2"><%= item.name %></strong> (x<%= item.quantity %>)
                                    </div>
                                    <span>₹<%= item.price * item.quantity %></span>
                                </li>
                            <% }) %>
                        </ul>
                    <% } else { %>
                        <p>Your cart is empty.</p>
                    <% } %>
                </div>

                <div class="border">
                    <div class="d-flex">
                        <span>Subtotal:</span>
                        <span>₹<%= cartTotal %></span>
                    </div>
                    <div class="d-flex">
                        <span>Discount:</span>
                        <span id="discountAmount">- ₹0</span>
                    </div>
                    <div class="d-flex">
                        <span>Delivery Charge:</span>
                        <span id="deliveryCharge">₹0</span>
                    </div>
                    <div class="d-flex font-weight-bold">
                        <span>Total:</span>
                        <span id="totalAmount">₹<%= cartTotal %></span>
                    </div>
                </div>
            </div>
                
           <!-- Right Column: Address Selection -->
<div>
    <h4>Select Saved Address</h4>
    <form id="checkoutForm" >
        <div class="form-group">
            <label for="addressSelect">Saved Addresses</label>
            <% if (addresses.length > 0) { %>
                <select id="addressSelect" class="form-control" onchange="selectAddressFromDropdown()" required>
                    <option value="">-- Select Address --</option>
                    <% addresses.forEach(address => { %>
                        <option value="<%= address._id %>" 
                                data-name="<%= address.name %>" 
                                data-address="<%= address.address %>" 
                                data-locality="<%= address.locality %>" 
                                data-city="<%= address.city %>" 
                                data-state="<%= address.state %>" 
                                data-phone="<%= address.phone %>" 
                                data-pincode="<%= address.pincode %>" 
                                data-alternatePhone="<%= address.alternatePhone %>" 
                                data-landmark="<%= address.landmark %>">
                            <%= address.name %>: <%= address.address %>, <%= address.locality %>, 
                            <%= address.city %>, <%= address.state %>, <%= address.phone %>, 
                            <%= address.pincode %>, <%= address.alternatePhone %>, 
                            <%= address.landmark %>
                        </option>
                    <% }) %>
                </select>
            <% } else { %>
                <p class="text-danger">No saved addresses found. Please add a new address.</p>
                <!-- <button type="button" class="btn btn-primary" onclick="window.location.href='/user/check'">
                    Add Address
                </button> -->
            <% } %>
            
        </div>
        <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#addAddressModal">
            Add New Address
        </button>
        <!-- Hidden Inputs for Address Details -->
        <input type="hidden" id="selectedAddress" name="addressId" required>
        <input type="hidden" id="name" name="name" required>
        <input type="hidden" id="address" name="address" required>
        <input type="hidden" id="locality" name="locality" required>
        <input type="hidden" id="city" name="city" required>
        <input type="hidden" id="state" name="state" required>
        <input type="hidden" id="phone" name="phone" required>
        <input type="hidden" id="pincode" name="pincode" required>
        <input type="hidden" id="alternatePhone" name="alternatePhone">
        <input type="hidden" id="landmark" name="landmark">

    
        


        <!-- Payment Method -->
        <h4 class="mt-4">Payment Method</h4>
        <div class="form-group">
            <div class="form-check">
                <input
                    class="form-check-input"
                    type="radio"
                    name="paymentMethod"
                    id="cashOnDelivery"
                    value="cod"
                    required
                />
                <label class="form-check-label" for="cashOnDelivery">Cash on Delivery</label>
            </div>
            <div class="form-check">
                <input
                    class="form-check-input"
                    type="radio"
                    name="paymentMethod"
                    id="razorpay"
                    value="razorpay"
                    required
                />
                <label class="form-check-label" for="razorpay">Pay with Razorpay</label>
            </div>
            <!-- <div class="form-check">
                <input
                    class="form-check-input"
                    type="radio"
                    name="paymentMethod"
                    id="wallet"
                    value="wallet"
                    required
                />
                <label class="form-check-label" for="wallet">Pay with Wallet</label>
            </div> -->
            <div id="wallet-balance" style="display: none; margin-top: 5px;">
                Wallet Balance: ₹<span id="balance-amount">0</span>
            </div>
        </div>

                
        <div class="form-group mt-3">
            <label for="couponCode">Available Coupons</label>
            <select id="couponCode" name="couponCode" class="form-control" style="height: calc(2.25rem + 8px)">
                <option value="" disabled selected>Select a coupon</option>
            </select>
          
        </div>
        <button type="button" id="couponButton" class="btn btn-secondary mt-2" onclick="toggleCoupon()">Apply Coupon</button>
        

        <button type="submit" class="btn btn-success" id="payment-button">Place Order</button>
    </form>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    document.querySelector("#checkoutForm").addEventListener("submit", handlePayment);

    async function handlePayment(e) {
        e.preventDefault();

        const formData = new FormData(document.querySelector("#checkoutForm"));
        const formDataObject = Object.fromEntries(formData.entries());
        const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
        formDataObject.paymentMethod = selectedPaymentMethod;

        if (selectedPaymentMethod === 'razorpay') {
            try {
                const response = await fetch('/user/checkoutRazorpay', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formDataObject),
                });

                if (!response.ok) throw new Error(await response.text());

                const data = await response.json();

                const options = {
                    key: 'rzp_test_pXZoNFSmNMsqPv',
                    amount: data.amount,
                    currency: data.currency,
                    name: 'ShoppyCart',
                    description: 'Order Payment',
                    order_id: data.orderId,
                    handler: async (response) => {
                        const verifyResponse = await fetch('/user/verifyRazorpay', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_signature: response.razorpay_signature,
                            }),
                        });

                        if (verifyResponse.ok) {
                            const data = await verifyResponse.json();
                            window.location.href = `/user/orderSuccess?orderId=${data.orderId}`;
                        } else {
                            alert('Payment verification failed. Please contact support.');
                        }
                    },
                    theme: { color: '#F37254' },
                };

                const rzp = new Razorpay(options);
                rzp.open();

                rzp.on('payment.failed', () => {
                    alert('Payment failed. Please try again.');
                });
            } catch (error) {
                console.error('Error during Razorpay checkout:', error);
                alert('Error during payment. Please try again.');
                window.location.href = `/user/orderfailed?orderId=${error.orderId}`;
            }
        } else {
           // Handle non-Razorpay payment methods
        try {
    const response = await fetch('/user/checkoutRazorpay', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(formDataObject),
    });

    if (!response.ok) {
        const errorMessage = await response.text(); // Get detailed error message from backend
        throw new Error(errorMessage || 'Failed to process non-Razorpay payment');
    }

    const data = await response.json(); // Assuming the backend sends back the order ID in the response
    const orderId = data.orderId; // Adjust this line based on your backend response structure

    // Redirect to success page with order ID
    window.location.href = `/user/orderSuccess?orderId=${orderId}`;
} catch (error) {
    console.error('Error during non-Razorpay payment processing:', error);

    // Handle specific error messages
    let errorMessage = 'An error occurred while processing your payment. Please try again.';
    if (error.message.includes('Insufficient wallet balance')) {
        errorMessage = 'Your wallet balance is insufficient to complete this payment.';
    } else if (error.message.includes('Network error')) {
        errorMessage = 'A network error occurred. Please check your internet connection and try again.';
    } else if (error.message.includes('Server error')) {
        errorMessage = 'A server error occurred. Please try again later.';
    }

    // Display the appropriate error message to the user
    Swal.fire({
        icon: 'error',
        title: 'Error',
        text: errorMessage,
    });
}

    }
}

</script>



<script>
    function selectAddressFromDropdown() {
        const selectedOption = document.getElementById('addressSelect').selectedOptions[0];
        document.getElementById('selectedAddress').value = selectedOption.value;
        document.getElementById('name').value = selectedOption.getAttribute('data-name');
        document.getElementById('address').value = selectedOption.getAttribute('data-address');
        document.getElementById('locality').value = selectedOption.getAttribute('data-locality');
        document.getElementById('city').value = selectedOption.getAttribute('data-city');
        document.getElementById('state').value = selectedOption.getAttribute('data-state');
        document.getElementById('phone').value = selectedOption.getAttribute('data-phone');
        document.getElementById('pincode').value = selectedOption.getAttribute('data-pincode');
        document.getElementById('alternatePhone').value = selectedOption.getAttribute('data-alternatePhone');
        document.getElementById('landmark').value = selectedOption.getAttribute('data-landmark');
    }
</script>


                       
<!-- Modal to Add New Address -->

<script>
    // Function to handle saving the new address and adding it to the form
       
    async function saveNewAddress() {
        const name = document.getElementById('newName').value;
        const address = document.getElementById('newAddress').value;
        const locality = document.getElementById('newLocality').value;
        const city = document.getElementById('newCity').value;
        const state = document.getElementById('newState').value;
        const pincode = document.getElementById('newPincode').value;
        const phone = document.getElementById('newPhone').value;
        const alternatePhone = document.getElementById('newAlternatePhone').value;
        const landmark = document.getElementById('newLandmark').value;


       
    

    const userId = '<%= userId %>';  // Assume user ID is available on the server-side.

    try {
        const response = await fetch('/user/addNewAddress', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userId,name, address, locality, city, state, phone, pincode, alternatePhone, landmark,
            }),
        });

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Address saved successfully!',
                timer: 2000,
                showConfirmButton: false,
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message || 'Failed to save the address.',
            });
        }
    } catch (error) {
        console.error('Error saving address:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while saving the address.',
        });
    }
}

</script>

<script>
    document.addEventListener('DOMContentLoaded', async () => {
    const walletInput = document.getElementById('wallet');
    const balanceContainer = document.getElementById('wallet-balance');
    const balanceAmount = document.getElementById('balance-amount');

    try {
        // Fetch wallet balance from backend
        const response = await fetch('/user/walletBalance');
        if (response.ok) {
            const { balance } = await response.json();
            balanceAmount.textContent = balance || 0; // Default to 0 if balance is undefined
        } else {
            console.error('Failed to fetch wallet balance');
        }
    } catch (error) {
        console.error('Error fetching wallet balance:', error);
    }

    // Show wallet balance when the wallet option is selected
    walletInput.addEventListener('change', () => {
        balanceContainer.style.display = 'block';
    });
});

    
     
    </script>
<script>

document.addEventListener("DOMContentLoaded", function () {
            const total = '<%= cartTotal %>'
            const codOption = document.getElementById("cashOnDelivery");
    
            if (total > 1000) {
                // Disable the COD option
                codOption.disabled = true;
                // Show SweetAlert notification
                Swal.fire({
                    icon: 'info',
                    title: 'Notice',
                    text: 'Cash on Delivery is unavailable for orders above 1000. Please choose Razorpay.',
                    confirmButtonText: 'Okay'
                });
            }
        });
</script>
                 
         
                
    
            </div>
        </div>
    </div>
       
<script>
    function showAddAddressForm() {
        document.getElementById('newAddressForm').style.display = 'block';
        // Clear selected address if adding a new one
        document.getElementById('addressSelect').value = '';
        clearSelectedAddressInputs();
    }


       
function clearSelectedAddressInputs() {
    document.getElementById('selectedAddress').value = '';
    document.getElementById('name').value = '';
    document.getElementById('address').value = '';
    document.getElementById('locality').value = '';
    document.getElementById('city').value = '';
    document.getElementById('state').value = '';
    document.getElementById('phone').value = '';
    document.getElementById('pincode').value = '';
    document.getElementById('alternatePhone').value = '';
    document.getElementById('landmark').value = '';
}


        

        
    </script>
<script>
    // Coupons script
    let availableCoupons = <%- JSON.stringify(availableCoupons) %>; // Serialize coupons as JSON
    availableCoupons = JSON.parse(availableCoupons); // Parse JSON back into an array
    
    const couponSelect = document.getElementById('couponCode');
    availableCoupons.forEach(coupon => {
        const option = document.createElement('option');
        option.value = coupon.code;
        option.textContent = coupon.description;
        couponSelect.appendChild(option);
    });

    // Coupon apply/remove logic
    let couponApplied = false;
    let subtotal = <%- cartTotal || 0 %>; // Get subtotal (cartTotal) from the server
    let discountedTotal = subtotal;

    // Apply or remove coupon
    function toggleCoupon() {
        if (!couponApplied) {
            applyCoupon();
        } else {
            removeCoupon();
        }
    }

    // Apply Coupon
    async function applyCoupon() {
        const couponCode = document.getElementById('couponCode').value;

        if (!couponCode) {
            Swal.fire({
                icon: 'warning',
                title: 'No Coupon Selected',
                text: 'Please select a coupon to apply.',
                confirmButtonText: 'OK'
            });
            return;
        }

        const response = await fetch('/user/validateCoupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ couponCode, subtotal })
        });

        const data = await response.json();

        if (response.ok) {
            // discountedTotal = subtotal - (subtotal * (data.discountPercentage / 100)); // Apply discount
            // document.getElementById('totalAmount').innerText = `₹${discountedTotal.toFixed(2)}`;
            // document.getElementById('discountAmount').innerText = `- ₹${(subtotal * (data.discountPercentage / 100)).toFixed(2)}`;
            // document.getElementById('couponButton').innerText = "Remove Coupon";
            // couponApplied = true;
        //     const discount = subtotal * (data.discountPercentage / 100); // Calculate discount amount
        // const discountedTotal = Math.round(subtotal - discount)+99; // Round the total amount

        // document.getElementById('totalAmount').innerText = `₹${discountedTotal}`; // Rounded total amount
        // document.getElementById('discountAmount').innerText = `- ₹${Math.round(discount)}`; // Rounded discount amount
        // document.getElementById('couponButton').innerText = "Remove Coupon";
        // couponApplied = true;

        const discount = data.discount
        const deliveryCharge = 99; // Fixed delivery charge
        const discountedTotal = Math.round(subtotal - discount + deliveryCharge);

        document.getElementById('totalAmount').innerText = `₹${discountedTotal}`;
        document.getElementById('discountAmount').innerText = `- ₹${Math.round(discount)}`;
        document.getElementById('couponButton').innerText = "Remove Coupon";
        couponApplied = true;



            Swal.fire({
                icon: 'success',
                title: 'Coupon Applied!',
                text: data.message,
                confirmButtonText: 'OK'
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Invalid Coupon',
                text: data.message || 'Please try a valid coupon.',
                confirmButtonText: 'OK'
            });
            document.getElementById('totalAmount').innerText = `₹${subtotal.toFixed(2)}`;
            document.getElementById('discountAmount').innerText = '- ₹0';
        }
    }

 // Remove Coupon
async function removeCoupon() {
    try {
        // Reset the UI to original subtotal
        discountedTotal = subtotal; // Reset total to original subtotal
        document.getElementById('totalAmount').innerText = `₹${subtotal.toFixed(2)}`;
        document.getElementById('discountAmount').innerText = '- ₹0';
        document.getElementById('couponButton').innerText = "Apply Coupon";
        couponApplied = false;

        // Make a fetch request to remove the coupon
        const response = await fetch('/user/removeCoupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        const data = await response.json();

        // Handle server response
        if (response.ok && data.success) {
            Swal.fire({
                icon: 'info',
                title: 'Coupon Removed',
                text: 'The coupon has been successfully removed.',
                confirmButtonText: 'OK',
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Failed to Remove Coupon',
                text: data.message || 'Unable to remove the coupon.',
                confirmButtonText: 'OK',
            });
        }
    } catch (error) {
        console.error('Error removing coupon:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An unexpected error occurred while removing the coupon.',
            confirmButtonText: 'OK',
        });
    }
}



    // Load available coupons on page load
    document.addEventListener('DOMContentLoaded', fetchCoupons);
</script>



<script>
    // Elements for delivery charge and total calculation
    const deliveryChargeElement = document.getElementById('deliveryCharge');
    const totalAmountElement = document.getElementById('totalAmount');
    const subtotalElement = document.querySelector('div.d-flex span:nth-child(2)');

    // Fixed delivery charge
    const fixedDeliveryCharge = 99;

    // Update the delivery charge and recalculate the total
    function updateTotal() {
        // Display the fixed delivery charge
        deliveryChargeElement.textContent = `₹${fixedDeliveryCharge}`;

        // Parse subtotal value and remove '₹' symbol
        const subtotal = parseFloat(subtotalElement.textContent.replace('₹', '')) || 0;

        // Calculate total including delivery charge
        const total = subtotal + fixedDeliveryCharge;

        // Update the total amount
        totalAmountElement.textContent = `₹${total.toFixed(2)}`;
    }

    // Run the update total function on page load
    document.addEventListener('DOMContentLoaded', updateTotal);
</script>



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- SweetAlert JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.0/dist/sweetalert2.min.js"></script>
   
<%-include('./partials/footer.ejs')%>